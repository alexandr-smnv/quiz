{"version":3,"sources":["components/SelectField.js","components/TextFieldComp.js","redux/actionsTypes.js","redux/actions/questionsAction.js","hooks/useAxios.js","data/data.js","redux/actions/statisticsAction.js","pages/SettingsScreen.js","redux/actions/settingActions.js","pages/QuestionsScreen.js","pages/FinalScreen.js","pages/StatisticScreen.js","pages/CreateQuizScreen.js","App.js","redux/reducers/settingsReducer.js","redux/reducers/questionsReducer.js","redux/reducers/statisticsReducer.js","redux/store.js","index.js"],"names":["SelectField","name","label","value","options","handleChange","Box","mt","width","FormControl","size","fullWidth","InputLabel","Select","onChange","map","option","MenuItem","id","TextFieldComp","type","TextField","variant","CHANGE_AMOUNT","CHANGE_SCORE","CHANGE_SETTINGS","FETCH_QUESTIONS","ADD_ANSWER","CLEAN_STATISTIC","handleFetchQuestions","questions","payload","handleScoreChange","score","axios","defaults","baseURL","useAxios","url","useState","response","setResponse","error","setError","loading","setLoading","useEffect","get","then","res","data","catch","err","finally","difficultyOptions","typeOptions","handleCleanStatistic","SettingsScreen","dispatch","useDispatch","navigate","useNavigate","resCategory","category","difficulty","amount","settings","setSettings","apiUrl","concat","e","target","CircularProgress","Typography","color","onSubmit","event","preventDefault","handleChangeSettings","results","localStorage","removeItem","trivia_categories","Button","onClick","QuestionsScreen","useSelector","state","questionsReducer","questionIndex","setQuestionIndex","setOptions","selected","setSelected","question","currentAnswer","correctAnswer","answer","setAnswer","length","indexStr","getItem","JSON","parse","setItem","stringify","questionInfo","answers","incorrect_answers","splice","max","Math","floor","random","correct_answer","handleSelect","decode","style","pointerEvents","handleClickAnswer","Grid","justifyContent","container","spacing","item","xs","console","log","FinalScreen","fontWeight","mb","StatisticScreen","statistic","statistics","index","Card","sx","minWidth","CardContent","fontSize","gutterBottom","CreateQuizScreen","setQuestion","setCorrectAnswer","incorrectAnswer1","setIncorrectAnswer1","incorrectAnswer2","setIncorrectAnswer2","incorrectAnswer3","setIncorrectAnswer3","quizInfo","setQuizInfo","App","Container","maxWidth","textAlign","path","element","initialState","question_category","question_difficulty","question_type","amount_of_question","settingsReducer","action","statisticsReducer","rootReducers","combineReducers","persistedStore","questionStr","undefined","loadQuestionFromLocalStorage","statisticStr","loadStatisticFromLocalStorage","store","createStore","devToolsEnhancer","getState","subscribe","saveToLocalStorage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04079116.chunk.js","sourcesContent":["import React from 'react';\nimport {Box, FormControl, InputLabel, MenuItem, Select} from \"@mui/material\";\n\nconst SelectField = ({name, label, value, options, handleChange}) => {\n\n  return (\n    <Box mt={3} width={\"100%\"}>\n      <FormControl size={\"small\"} fullWidth>\n        <InputLabel>{label}</InputLabel>\n        <Select name={name} value={value} label={label} onChange={handleChange}>\n          {\n            options.map(option => <MenuItem key={option.id} value={option.id}>{option.name}</MenuItem>)\n          }\n        </Select>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default SelectField;\n","import React from 'react';\nimport {Box, FormControl, TextField} from \"@mui/material\";\n\nconst TextFieldComp = ({name, type, label, handleChange}) => {\n\n  return (\n    <Box mt={3} width={\"100%\"}>\n      <FormControl fullWidth size={\"small\"}>\n        <TextField\n          name={name}\n          type={type}\n          label={label}\n          onChange={handleChange}\n          size={\"small\"}\n          variant={\"outlined\"}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default TextFieldComp;\n","export const CHANGE_AMOUNT = 'CHANGE_AMOUNT'\nexport const CHANGE_SCORE = 'CHANGE_SCORE'\nexport const CHANGE_SETTINGS = 'CHANGE_SETTINGS'\nexport const FETCH_QUESTIONS = 'FETCH_QUESTIONS'\nexport const ADD_ANSWER = 'ADD_ANSWER'\nexport const CLEAN_STATISTIC = 'CLEAN_STATISTIC'\n","import {CHANGE_SCORE, FETCH_QUESTIONS} from \"../actionsTypes\";\n\n\nexport const handleFetchQuestions = (questions) => {\n  return {\n    type: FETCH_QUESTIONS,\n    payload: questions\n  }\n}\n\nexport const handleScoreChange = (score) => {\n  return {\n    type: CHANGE_SCORE,\n    payload: score\n  }\n}","import {useEffect, useState} from 'react';\nimport axios from \"axios\";\n\naxios.defaults.baseURL = 'https://opentdb.com/'\n\n\nconst useAxios = ({url}) => {\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchData = () => {\n      axios\n        .get(url)\n        .then(res => setResponse(res.data))\n        .catch(err => setError(err))\n        .finally(() => setLoading(false))\n    }\n    fetchData()\n  }, [url]);\n\n  return {response, error, loading};\n};\n\nexport default useAxios;\n","export const difficultyOptions = [\n  {id: 'easy', name: 'Easy'},\n  {id: 'medium', name: 'Medium'},\n  {id: 'hard', name: 'Hard'},\n]\n\nexport const typeOptions = [\n  {id: 'multiple', name: 'Multiple'},\n  {id: 'boolean', name: 'True/False'}\n]","import {ADD_ANSWER, CLEAN_STATISTIC} from \"../actionsTypes\";\n\n\nexport const handleAddAnswer = (payload) => {\n  return {\n    type: ADD_ANSWER,\n    payload\n  }\n}\n\nexport const handleCleanStatistic = () => {\n  return {\n    type: CLEAN_STATISTIC\n  }\n}","import React, {useState} from 'react';\n\nimport {useNavigate} from 'react-router-dom';\nimport {useDispatch} from \"react-redux\";\nimport axios from \"axios\";\n\nimport {Box, Button, CircularProgress, Typography} from \"@mui/material\";\n\nimport SelectField from \"../components/SelectField\";\nimport TextFieldComp from \"../components/TextFieldComp\";\n\nimport {handleChangeSettings} from \"../redux/actions/settingActions\";\nimport {handleFetchQuestions, handleScoreChange} from \"../redux/actions/questionsAction\";\n\nimport useAxios from \"../hooks/useAxios\";\nimport {difficultyOptions, typeOptions} from \"../data/data\";\nimport {handleCleanStatistic} from \"../redux/actions/statisticsAction\";\n\n\nconst SettingsScreen = () => {\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const resCategory = useAxios({url: \"api_category.php\"})\n  // данные для получения массива вопросов\n  const [settings, setSettings] = useState({\n    name: \"\",\n    category: \"\",\n    difficulty: \"\",\n    type: \"\",\n    amount: 10\n  });\n\n  // ==== формирование адресной строки для отправки\n  let apiUrl = `/api.php?amount=${settings.amount}`\n\n  if (settings.category) {\n    apiUrl = apiUrl.concat(`&category=${settings.category}`)\n  }\n  if (settings.difficulty) {\n    apiUrl = apiUrl.concat(`&difficulty=${settings.difficulty}`)\n  }\n  if (settings.type) {\n    apiUrl = apiUrl.concat(`&type=${settings.type}`)\n  }\n\n  // ==== формирование адресной строки для отправки\n\n  // запрос на сервер, запись полученных ответов в redux\n  const fetchQuestions = () => {\n    axios({url: apiUrl})\n      .then(response => dispatch(handleFetchQuestions(response.data.results)))\n      .then(navigate('/questions'))\n  }\n\n  // запись параметров из inputs\n  const handleChange = (e) => {\n    setSettings({...settings, [e.target.name]: e.target.value})\n  }\n\n  // submit формы (запись параметров в redux, отправка запроса на сервер)\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    // запись параметров в redux\n    dispatch(handleChangeSettings(settings))\n    fetchQuestions()\n    // удаление предыдущего счетчика\n    dispatch(handleScoreChange(0))\n    // удаление предыдущие статистики\n    dispatch(handleCleanStatistic())\n    // удаление из localStorage индекса текущего вопроса\n    localStorage.removeItem('indexQuestion')\n  }\n\n  const handleContinueQuiz = () => {\n    navigate('/questions')\n  }\n\n  // отображение загрузки\n  if (resCategory.loading) {\n    return (\n      <Box mt={30}>\n        <CircularProgress />\n      </Box>\n    )\n  }\n\n  // отображение ошибки\n  if (resCategory.error) {\n    return (\n      <Typography variant={\"h6\"} mt={20} color={\"red\"}>\n        Some Want Wrong!\n      </Typography>\n    )\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextFieldComp\n        name=\"name\"\n        type=\"text\"\n        label=\"Enter your name\"\n        handleChange={handleChange}\n      />\n      <SelectField\n        name=\"category\"\n        options={resCategory.response.trivia_categories}\n        label=\"Category\"\n        value={settings.category}\n        handleChange={handleChange}\n      />\n      <SelectField\n        name=\"difficulty\"\n        options={difficultyOptions}\n        label=\"Difficulty\"\n        value={settings.difficulty}\n        handleChange={handleChange}\n      />\n      <SelectField\n        name=\"type\"\n        options={typeOptions}\n        label=\"Type\"\n        value={settings.type}\n        handleChange={handleChange}\n      />\n      <TextFieldComp\n        name=\"amount\"\n        type=\"number\"\n        label=\"Amount of questions\"\n        handleChange={handleChange}\n      />\n      <Box mt={3} width={\"100%\"}>\n        <Button fullWidth variant={\"contained\"} type={\"submit\"}>\n          Get new quiz\n        </Button>\n      </Box>\n\n      <Box mt={3} width={\"100%\"}>\n        <Button fullWidth variant={\"contained\"} color={'success'} onClick={handleContinueQuiz}>\n          Continue quiz\n        </Button>\n      </Box>\n    </form>\n  );\n};\n\nexport default SettingsScreen;","import {\n  CHANGE_AMOUNT,\n  CHANGE_SETTINGS,\n} from \"../actionsTypes\";\n\n\nexport const handleChangeSettings = (settings) => {\n  return {\n    type: CHANGE_SETTINGS,\n    payload: settings\n  }\n}\n\nexport const handleAmountChange = (amount) => {\n  return {\n    type: CHANGE_AMOUNT,\n    payload: amount\n  }\n}","import React, {useEffect, useState} from 'react';\nimport {Box, Button, Grid, Typography} from \"@mui/material\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useNavigate} from \"react-router-dom\";\nimport {handleScoreChange} from \"../redux/actions/questionsAction\";\nimport {decode} from \"html-entities\";\nimport {handleAddAnswer} from \"../redux/actions/statisticsAction\";\n\n// функция рандомного числа\nconst getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max))\n}\n\nconst QuestionsScreen = () => {\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const {name} = useSelector(state => state.settings)\n  const {questions, score} = useSelector(state => state.questionsReducer)\n  // индекс текущего вопроса\n  const [questionIndex, setQuestionIndex] = useState(0);\n  // варианты ответов\n  const [options, setOptions] = useState([]);\n  // заполняется когда принят ответ\n  const [selected, setSelected] = useState(null);\n  // данные об ответе (для статистики)\n  const [answer, setAnswer] = useState({\n    question: '',\n    currentAnswer: '',\n    correctAnswer: ''\n  });\n\n\n  useEffect(() => {\n    if (questions?.length) {\n      // индекс вопроса из localStorage\n      const indexStr = localStorage.getItem('indexQuestion')\n      // если индекс 0 и есть в localStorage данные об индексе - берем их\n      // если нет то записываем в localStorage индекс текущего вопроса\n      if (!questionIndex && indexStr) {\n        setQuestionIndex(JSON.parse(indexStr))\n      } else {\n        localStorage.setItem('indexQuestion', JSON.stringify(questionIndex))\n      }\n      // загрузка вопроса по индексу\n      const questionInfo = questions[questionIndex]\n      // загрузка неправильных ответов\n      let answers = [...questionInfo.incorrect_answers]\n      // добавление в массив ответов правильный ответ на рандомное место\n      answers.splice(getRandomInt(3), 0, questionInfo.correct_answer)\n      setOptions(answers)\n    }\n  }, [questions, questionIndex])\n\n  // нажатие по ответу\n  const handleClickAnswer = (data) => {\n    const questionInfo = questions[questionIndex];\n    // обработка счетчика правильных ответов\n    if (data === questionInfo.correct_answer) {\n      dispatch(handleScoreChange(score + 1));\n    }\n    setAnswer({\n      question: questionInfo.question,\n      correctAnswer: questionInfo.correct_answer,\n      currentAnswer: data\n    })\n    setSelected(data)\n  };\n\n  // функция для окрашивания правильного и неправильного ответов\n  const handleSelect = (data) => {\n    const question = questions[questionIndex];\n    // если выбранный ответ правильный - выделить зеленым\n    if (selected === data && selected === question.correct_answer) return \"success\";\n    // если выбранный ответ неправильный - выделить красным\n    else if (selected === data && selected !== question.correct_answer) return \"error\";\n    // выделить правильный ответ - зеленым\n    else if (data === question.correct_answer) return \"success\";\n  };\n\n  // переход на следующий вопрос\n  const handleNextQuestion = () => {\n    if (selected) {\n      dispatch(handleAddAnswer(answer))\n      setSelected(null)\n      if (questionIndex + 1 < questions.length) {\n        setQuestionIndex(questionIndex + 1);\n      } else {\n        navigate(\"/score\");\n      }\n    } else {\n      // добавить alert\n      console.log('Выберите вариант ответа')\n    }\n  }\n\n  const handleExit = () => {\n    navigate('/quiz')\n  }\n\n  return (\n    <Box>\n      <Typography variant={\"h4\"}>Hello, {name ? name : \"Dear friend\"}!!!</Typography>\n      <Typography mt={2} variant={\"h4\"}>Question № {questionIndex + 1}</Typography>\n      <Typography mt={5}>{decode(questions[questionIndex]?.question)}</Typography>\n\n      {\n        options.map((data, id) => (\n          <Box key={id} mt={2}>\n            <Button\n              style={selected && {pointerEvents: 'none'}}\n              color={selected ? handleSelect(data) : 'primary'}\n              variant={\"contained\"}\n              onClick={() => handleClickAnswer(data)}\n            >\n              {decode(data)}\n            </Button>\n          </Box>\n        ))\n      }\n\n      <Grid mt={4} justifyContent={\"center\"} container spacing={2}>\n        <Grid item xs={4}>\n          <Button color={\"error\"} onClick={handleExit} fullWidth variant=\"contained\">Exit</Button>\n        </Grid>\n        <Grid item xs={4}>\n          <Button onClick={handleNextQuestion} color={'success'} fullWidth variant=\"contained\">Next</Button>\n        </Grid>\n      </Grid>\n\n      <Box mt={5}>Score: {score} / {questions.length}</Box>\n    </Box>\n  );\n};\n\nexport default QuestionsScreen;","import React from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useNavigate} from \"react-router-dom\";\nimport {Box, Button, Grid, Typography} from \"@mui/material\";\nimport {handleCleanStatistic} from \"../redux/actions/statisticsAction\";\nimport {handleScoreChange} from \"../redux/actions/questionsAction\";\n\nconst FinalScreen = () => {\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const {score} = useSelector(state => state.questionsReducer)\n\n  // переход для создания нового quiz\n  const handleNewQuiz = () => {\n    dispatch(handleScoreChange(0))\n    dispatch(handleCleanStatistic())\n    localStorage.removeItem('indexQuestion')\n    navigate('/quiz')\n  }\n\n  // переход для просмотра статистика\n  const handleStatistic = () => {\n    navigate('/statistic')\n  }\n\n  return (\n    <Box mt={10}>\n      <Typography variant={\"h3\"} fontWeight={\"bold\"} mb={3}>Final score - {score}</Typography>\n      <Grid mt={4} justifyContent={\"center\"} container spacing={2}>\n        <Grid item xs={4}>\n          <Button variant={\"contained\"} color={\"success\"} onClick={handleNewQuiz}>New Quiz</Button>\n        </Grid>\n        <Grid item xs={4}>\n            <Button variant={\"contained\"} color={\"primary\"} onClick={handleStatistic}>Statistic</Button>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default FinalScreen;","import React from 'react';\nimport {Box, Button, Card, CardContent, Typography} from \"@mui/material\";\nimport {useSelector} from \"react-redux\";\nimport {useNavigate} from \"react-router-dom\";\nimport {decode} from \"html-entities\";\n\nconst StatisticScreen = () => {\n  const statistic = useSelector(state => state.statistics)\n  const navigate = useNavigate()\n\n  const handleScore = () => {\n    navigate('/score')\n  }\n\n  return (\n    <>\n        <Box mb={2}>\n          <Button onClick={handleScore} variant={\"contained\"} color={\"primary\"}>\n            Back\n          </Button>\n        </Box>\n      {\n        statistic.map((data, index) => (\n          <Box key={data.question} mb={2}>\n            <Card sx={{minWidth: 275}}>\n              <CardContent>\n                <Typography sx={{fontSize: 14}} color=\"text.secondary\" gutterBottom>\n                  Question № {index + 1}\n                </Typography>\n                <Typography variant=\"h6\">\n                  {decode(data.question)}\n                </Typography>\n                <Typography sx={{fontSize: 14}} color=\"text.secondary\">\n                  Your answer:\n                </Typography>\n                <Typography variant=\"h6\">\n                  {decode(data.currentAnswer)}\n                </Typography>\n                <Typography sx={{fontSize: 14}} color=\"text.secondary\">\n                  Correct answer:\n                </Typography>\n                <Typography variant=\"h6\">\n                  {decode(data.correctAnswer)}\n                </Typography>\n                <Typography sx={{fontSize: 14}} color=\"text.secondary\">\n                  Result:\n                </Typography>\n                <Typography variant=\"h6\">\n                  {\n                    data.currentAnswer === data.correctAnswer\n                      ?\n                      <Typography color={\"green\"}>SUCCESS</Typography>\n                      :\n                      <Typography color={\"red\"}>ERROR</Typography>\n                  }\n                </Typography>\n              </CardContent>\n            </Card>\n          </Box>\n\n        ))\n      }\n    </>\n\n  );\n};\n\nexport default StatisticScreen;\n","import React, {useState} from 'react';\nimport TextFieldComp from \"../components/TextFieldComp\";\nimport {Box, Button} from \"@mui/material\";\nimport {useDispatch} from \"react-redux\";\nimport {handleFetchQuestions} from \"../redux/actions/questionsAction\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst CreateQuizScreen = () => {\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const [question, setQuestion] = useState('');\n  const [correctAnswer, setCorrectAnswer] = useState('');\n  const [incorrectAnswer1, setIncorrectAnswer1] = useState('');\n  const [incorrectAnswer2, setIncorrectAnswer2] = useState('');\n  const [incorrectAnswer3, setIncorrectAnswer3] = useState('');\n\n  const [quizInfo, setQuizInfo] = useState([]);\n\n  const handleAddQuestion = (e) => {\n    setQuizInfo([...quizInfo, {\n      question: question,\n      correct_answer: correctAnswer,\n      incorrect_answers: [incorrectAnswer1, incorrectAnswer2, incorrectAnswer3]\n    }])\n    setQuestion('')\n    setCorrectAnswer('')\n    setIncorrectAnswer1('')\n    setIncorrectAnswer2('')\n    setIncorrectAnswer3('')\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    dispatch(handleFetchQuestions(quizInfo))\n    navigate('/questions')\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextFieldComp\n        name=\"question\"\n        type=\"text\"\n        label=\"Enter your question\"\n        handleChange={(e) => setQuestion(e.target.value)}\n      />\n      <TextFieldComp\n        name=\"correctAnswer\"\n        type=\"text\"\n        label=\"Enter correct answer\"\n        handleChange={(e) => setCorrectAnswer(e.target.value)}\n      />\n\n      <TextFieldComp\n        name=\"incorrectAnswer\"\n        type=\"text\"\n        label=\"Enter incorrect answer\"\n        handleChange={(e) => setIncorrectAnswer1(e.target.value)}\n      />\n      <TextFieldComp\n        name=\"incorrectAnswer\"\n        type=\"text\"\n        label=\"Enter incorrect answer\"\n        handleChange={(e) => setIncorrectAnswer2(e.target.value)}\n      />\n      <TextFieldComp\n        name=\"incorrectAnswer\"\n        type=\"text\"\n        label=\"Enter incorrect answer\"\n        handleChange={(e) => setIncorrectAnswer3(e.target.value)}\n      />\n\n      <Box mt={3} width={\"100%\"}>\n        <Button onClick={handleAddQuestion} fullWidth variant={\"contained\"}>\n          Add question\n        </Button>\n      </Box>\n\n      <Box mt={3} width={\"100%\"}>\n        <Button fullWidth variant={\"contained\"} type={\"submit\"}>\n          Create quiz\n        </Button>\n      </Box>\n    </form>\n  );\n};\n\nexport default CreateQuizScreen;\n","import React from \"react\";\nimport {\n  BrowserRouter as Router, Route, Routes\n} from 'react-router-dom'\nimport {Box, Container, Typography} from \"@mui/material\";\nimport SettingsScreen from \"./pages/SettingsScreen\";\nimport QuestionsScreen from \"./pages/QuestionsScreen\";\nimport FinalScreen from \"./pages/FinalScreen\";\nimport StatisticScreen from \"./pages/StatisticScreen\";\nimport CreateQuizScreen from \"./pages/CreateQuizScreen\";\n\n\nfunction App() {\n  return (\n    <Container maxWidth=\"sm\">\n      <Box textAlign=\"center\" mt={5}>\n        <Typography variant=\"h2\" fontWeight=\"bold\" mb={5}>\n          Quiz App\n        </Typography>\n        <Router>\n          <Routes>\n            <Route path=\"/quiz\" element={<SettingsScreen/>}/>\n            <Route path=\"/questions\" element={<QuestionsScreen/>} />\n            <Route path=\"/score\" element={<FinalScreen/>} />\n            <Route path=\"/statistic\" element={<StatisticScreen/>} />\n            <Route path=\"/create\" element={<CreateQuizScreen/>} />\n          </Routes>\n        </Router>\n      </Box>\n    </Container>\n  );\n}\n\nexport default App;\n","import {CHANGE_AMOUNT, CHANGE_SETTINGS} from \"../actionsTypes\";\n\nconst initialState = {\n  name: \"\",\n  question_category: \"\",\n  question_difficulty: \"\",\n  question_type: \"\",\n  amount_of_question: \"\",\n}\n\nconst settingsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CHANGE_SETTINGS:\n      return {\n        ...state,\n        // отрефакторить\n        name: action.payload.name,\n        question_category: action.payload.category,\n        question_difficulty: action.payload.difficulty,\n        question_type: action.payload.type,\n        amount_of_question: action.payload.amount\n      }\n    case CHANGE_AMOUNT:\n      return {\n        ...state,\n        amount_of_question: action.payload\n      }\n    default:\n      return state\n  }\n}\n\nexport default settingsReducer;","import {CHANGE_SCORE, FETCH_QUESTIONS} from \"../actionsTypes\";\n\n\nconst initialState = {\n  questions: [],\n  score: 0\n}\n\nconst questionsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_QUESTIONS: {\n      return {\n        ...state, questions: action.payload\n      }\n    }\n    case CHANGE_SCORE:\n      return {\n        ...state,\n        score: action.payload\n      }\n    default:\n      return state\n  }\n}\n\nexport default questionsReducer;","import {ADD_ANSWER, CLEAN_STATISTIC} from \"../actionsTypes\";\n\n\nconst initialState = []\n\nconst statisticsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_ANSWER: {\n      return [...state, action.payload]\n    }\n    case CLEAN_STATISTIC: {\n      return []\n    }\n    default:\n      return state\n  }\n}\n\nexport default statisticsReducer;","import {combineReducers, createStore} from \"redux\";\nimport {devToolsEnhancer} from \"redux-devtools-extension\";\nimport settingsReducer from \"./reducers/settingsReducer\";\nimport questionsReducer from \"./reducers/questionsReducer\";\nimport statisticsReducer from \"./reducers/statisticsReducer\";\n\n\nconst rootReducers = combineReducers({\n  settings: settingsReducer,\n  questionsReducer: questionsReducer,\n  statistics: statisticsReducer\n})\n\nconst saveToLocalStorage = (state) => {\n  try {\n    localStorage.setItem('questions', JSON.stringify(state.questionsReducer));\n    localStorage.setItem('statistic', JSON.stringify(state.statistics));\n  } catch (e) {\n    console.error(e);\n  }\n};\n\nconst loadQuestionFromLocalStorage = () => {\n  try {\n    const questionStr = localStorage.getItem('questions');\n\n    return questionStr ? JSON.parse(questionStr) : undefined;\n  } catch (e) {\n    console.error(e);\n    return undefined;\n  }\n};\n\nconst loadStatisticFromLocalStorage = () => {\n  try {\n    const statisticStr = localStorage.getItem('statistic');\n\n    return statisticStr ? JSON.parse(statisticStr) : undefined;\n  } catch (e) {\n    console.error(e);\n    return undefined;\n  }\n};\n\nconst persistedStore = {\n  questionsReducer: loadQuestionFromLocalStorage(),\n  statistics: loadStatisticFromLocalStorage()\n};\n\n\nconst store = createStore(rootReducers, persistedStore, devToolsEnhancer())\nconsole.log(store.getState())\n\n\nstore.subscribe(() => {\n  saveToLocalStorage(store.getState());\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}